```

public class MarkerMoveUtil {
    private MapView mMapView;
    private BaiduMap mBaiduMap;
    private Polyline mVirtureRoad;
    private Marker mMoveMarker;
    private Handler mHandler;

    // 通过设置间隔时间和距离可以控制速度和图标移动的距离
    private  int TIME_INTERVAL = 80;
    private static final double DISTANCE = 0.0001;

    //结束线程的标志位
    private boolean stopThread = false;
    //中心点是否跟随车辆移动
    private boolean isCenterMove = false;
    //marker是否正在移動展示路径

    /**
     * polylines:坐标列表
     * **/
    public void startMove(MapView mapView, List<LatLng> polylines) {
        mMapView = mapView;
        mBaiduMap = mapView.getMap();
        mHandler = new Handler(Looper.getMainLooper());
        initRoadData(polylines);
        moveLooper();
    }



    private void initRoadData(List<LatLng> polylines) {
        //绘制路径
          OverlayOptions polylineOptions;
        polylineOptions = new PolylineOptions().points(polylines).width(10).color(Color.RED);
        mVirtureRoad = (Polyline) mBaiduMap.addOverlay(polylineOptions);

        //添加marker
          OverlayOptions markerOptions;
          markerOptions = new MarkerOptions().flat(true).anchor(0.5f, 0.5f).icon(BitmapDescriptorFactory
                .fromResource(R.drawable.marka1)).position(polylines.get(0)).rotate((float) getAngle(0));
          mMoveMarker = (Marker) mBaiduMap.addOverlay(markerOptions);
    }

    /**
     * 根据点获取图标转的角度
     */
    private double getAngle(int startIndex) {
        if ((startIndex + 1) >= mVirtureRoad.getPoints().size()) {
            throw new RuntimeException("index out of bonds");
        }
        LatLng startPoint = mVirtureRoad.getPoints().get(startIndex);
        LatLng endPoint = mVirtureRoad.getPoints().get(startIndex + 1);
        return getAngle(startPoint, endPoint);
    }

    /**
     * 根据两点算取图标转的角度
     */
    private double getAngle(LatLng fromPoint, LatLng toPoint) {
        double slope = getSlope(fromPoint, toPoint);
        if (slope == Double.MAX_VALUE) {
            if (toPoint.latitude > fromPoint.latitude) {
                return 0;
            } else {
                return 180;
            }
        }
        float deltAngle = 0;
        if ((toPoint.latitude - fromPoint.latitude) * slope < 0) {
            deltAngle = 180;
        }
        double radio = Math.atan(slope);
        double angle = 180 * (radio / Math.PI) + deltAngle - 90;
        return angle;
    }

    /**
     * 根据点和斜率算取截距
     */
    private double getInterception(double slope, LatLng point) {

        double interception = point.latitude - slope * point.longitude;
        return interception;
    }

    /**
     * 算取斜率
     */
    private double getSlope(int startIndex) {
        if ((startIndex + 1) >= mVirtureRoad.getPoints().size()) {
            throw new RuntimeException("index out of bonds");
        }
        LatLng startPoint = mVirtureRoad.getPoints().get(startIndex);
        LatLng endPoint = mVirtureRoad.getPoints().get(startIndex + 1);
        return getSlope(startPoint, endPoint);
    }

    /**
     * 算斜率
     */
    private double getSlope(LatLng fromPoint, LatLng toPoint) {
        if (toPoint.longitude == fromPoint.longitude) {
            return Double.MAX_VALUE;
        }
        double slope = ((toPoint.latitude - fromPoint.latitude) / (toPoint.longitude - fromPoint.longitude));
        return slope;

    }

    /**
     * 计算x方向每次移动的距离
     */
    private double getXMoveDistance(double slope) {
        if (slope == Double.MAX_VALUE) {
            return DISTANCE;
        }
        return Math.abs((DISTANCE * slope) / Math.sqrt(1 + slope * slope));
    }

    /**
     * 循环进行移动逻辑
     */
    public void moveLooper() {
        new Thread() {

            public void run() {


//                while (true) {

                    for (int i = 0; i < mVirtureRoad.getPoints().size() - 1; i++) {

                        final LatLng startPoint = mVirtureRoad.getPoints().get(i);
                        final LatLng endPoint = mVirtureRoad.getPoints().get(i + 1);

                        //当展示路径结束的时候
                        if (i==mVirtureRoad.getPoints().size()-2) {

                        }
                        if (stopThread) {
                            break;
                        }
                        //中心点是否跟随车辆移动，若是平滑的置于中央
                        if (isCenterMove) {
                            mBaiduMap.animateMapStatus(MapStatusUpdateFactory.newLatLng(startPoint));
                        }

                        mMoveMarker.setPosition(startPoint);

                        mHandler.post(new Runnable() {
                            @Override
                            public void run() {
                                // refresh marker's rotate
                                if (mMapView == null) {
                                    return;
                                }
                                mMoveMarker.setRotate((float) getAngle(startPoint,
                                        endPoint));
                            }
                        });
                        double slope = getSlope(startPoint, endPoint);
                        //是不是正向的标示（向上设为正向）
                        boolean isReverse = (startPoint.latitude > endPoint.latitude);

                        double intercept = getInterception(slope, startPoint);

                        double xMoveDistance = isReverse ? getXMoveDistance(slope)
                                : -1 * getXMoveDistance(slope);



                        for (double j = startPoint.latitude; !((j > endPoint.latitude) ^ isReverse); j = j - xMoveDistance) {

                            LatLng latLng = null;
                            if (slope != Double.MAX_VALUE) {
                                latLng = new LatLng(j, (j - intercept) / slope);
                            } else {
                                latLng = new LatLng(j, startPoint.longitude);
                            }

                            final LatLng finalLatLng = latLng;
                            mHandler.post(new Runnable() {
                                @Override
                                public void run() {
                                    if (mMapView == null) {
                                        return;
                                    }
                                    // refresh marker's position
                                    mMoveMarker.setPosition(finalLatLng);
                                }
                            });

                            try {
                                Thread.sleep(TIME_INTERVAL);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }

                    }
//                }
            }

        }.start();
    }

    /**用于结束线程
     * **/
    public void setStopThread(boolean stopThread) {
        this.stopThread = stopThread;
    }
    /**
    * 设置中心点是否跟随车辆移动
    **/
    public void setCenterMove(boolean centerMove) {
        isCenterMove = centerMove;
    }


    /**加速展示
     * **/
    public void accelerate(){
        TIME_INTERVAL = 2;
    }

    /**慢速展示
     * **/
    public void decelerate(){
        TIME_INTERVAL = 160;
    }


}

```
